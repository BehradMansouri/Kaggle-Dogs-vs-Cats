{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_QHYFR4TszGd",
        "outputId": "cf98e757-d95f-4e59-ab23-3d2950e9602a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "--2022-08-10 10:53:11--  https://storage.googleapis.com/tensorflow-1-public/course2/cats_and_dogs_filtered.zip\n",
            "Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.24.128, 172.217.194.128, 142.251.10.128, ...\n",
            "Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.24.128|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 68606236 (65M) [application/zip]\n",
            "Saving to: ‘cats_and_dogs_filtered.zip’\n",
            "\n",
            "cats_and_dogs_filte 100%[===================>]  65.43M  27.3MB/s    in 2.4s    \n",
            "\n",
            "2022-08-10 10:53:15 (27.3 MB/s) - ‘cats_and_dogs_filtered.zip’ saved [68606236/68606236]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import zipfile\n",
        "\n",
        "!wget https://storage.googleapis.com/tensorflow-1-public/course2/cats_and_dogs_filtered.zip\n",
        "\n",
        "\n",
        "zip_ref = zipfile.ZipFile(\"./cats_and_dogs_filtered.zip\", 'r')\n",
        "zip_ref.extractall(\"tmp/\")\n",
        "zip_ref.close()\n",
        "\n",
        "base_dir = 'tmp/cats_and_dogs_filtered'\n",
        "train_dir = os.path.join(base_dir, 'train')\n",
        "validation_dir = os.path.join(base_dir, 'validation')\n",
        "\n",
        "train_cats_dir = os.path.join(train_dir, 'cats')\n",
        "train_dogs_dir = os.path.join(train_dir, 'dogs')\n",
        "\n",
        "validation_cats_dir = os.path.join(validation_dir, 'cats')\n",
        "validation_dogs_dir = os.path.join(validation_dir, 'dogs')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ubx2rjTes2VY"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.optimizers import RMSprop\n",
        "from tensorflow.keras import initializers\n",
        "\n",
        "def create_model():\n",
        "  model = tf.keras.models.Sequential([\n",
        "      tf.keras.layers.Conv2D(64, (3,3), data_format=\"channels_last\", activation='relu', input_shape=(380, 380, 3)),\n",
        "      #tf.keras.layers.BatchNormalization(axis=-1),\n",
        "      tf.keras.layers.Dropout(0.01),\n",
        "      tf.keras.layers.Conv2D(64, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      tf.keras.layers.BatchNormalization(axis=-1),\n",
        "      tf.keras.layers.MaxPooling2D(2, 2),\n",
        "      tf.keras.layers.Conv2D(128, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      #tf.keras.layers.BatchNormalization(axis=-1),\n",
        "      tf.keras.layers.Dropout(0.02),\n",
        "      tf.keras.layers.Conv2D(128, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      tf.keras.layers.BatchNormalization(axis=-1),\n",
        "      tf.keras.layers.MaxPooling2D(2,2),\n",
        "      tf.keras.layers.Conv2D(256, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      #tf.keras.layers.BatchNormalization(axis=-1),\n",
        "      tf.keras.layers.Dropout(0.03),\n",
        "      tf.keras.layers.Conv2D(256, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      tf.keras.layers.BatchNormalization(axis=-1),\n",
        "      tf.keras.layers.MaxPooling2D(2,2),\n",
        "      #tf.keras.layers.Conv2D(512, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      tf.keras.layers.Conv2D(384, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      #tf.keras.layers.BatchNormalization(axis=-1),\n",
        "      tf.keras.layers.Dropout(0.04),\n",
        "      #tf.keras.layers.Conv2D(512, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      tf.keras.layers.Conv2D(384, (3,3), data_format=\"channels_last\", activation='relu'),\n",
        "      tf.keras.layers.BatchNormalization(axis=-1),\n",
        "      tf.keras.layers.MaxPooling2D(2,2),\n",
        "      tf.keras.layers.Flatten(),\n",
        "#      tf.keras.layers.Conv2D(64, (3,3), data_format=\"channels_last\", activation=tf.keras.layers.LeakyReLU(alpha=0.3)),\n",
        "      #tf.keras.layers.Dropout(0.2),\n",
        "      #tf.keras.layers.Dropout(0.1),\n",
        "      tf.keras.layers.Dropout(0.08),\n",
        "      #tf.keras.layers.Dense(1000, activation='relu', activity_regularizer=tf.keras.regularizers.L2(2e-5)),\n",
        "      #tf.keras.layers.Dense(1000, activation='relu', activity_regularizer=tf.keras.regularizers.L2(1e-6)),\n",
        "      #tf.keras.layers.Dense(1024, activation='relu'),\n",
        "      #tf.keras.layers.Dense(512, activation='relu'),\n",
        "      #tf.keras.layers.Dense(600, activation='relu', activity_regularizer=tf.keras.regularizers.L2(1e-4)),\n",
        "      tf.keras.layers.Dense(600, activation='relu', activity_regularizer=tf.keras.regularizers.L2(2e-5)),\n",
        "                                #tf.keras.layers.BatchNormalization(),\n",
        "      tf.keras.layers.Dense(25, activation='relu', activity_regularizer=tf.keras.regularizers.L2(1e-7)),\n",
        "                  #tf.keras.layers.Dense(71, activation='relu', activity_regularizer=tf.keras.regularizers.L2(2e-7)),\n",
        "                  #tf.keras.layers.Dense(9, activation='relu'),\n",
        "              #tf.keras.layers.BatchNormalization(scale=True, gamma_initializer=2),\n",
        "              #initializer=tf.keras.initializers.Constant(2.),\n",
        "              #tf.keras.layers.BatchNormalization(scale=True, gamma_initializer=initializer),\n",
        "      #tf.keras.layers.Dense(1, activation='sigmoid')\n",
        "      tf.keras.layers.Dense(2, activation='softmax')\n",
        "  ])\n",
        "\n",
        "  #model.compile(loss='binary_crossentropy',\n",
        "  model.compile(loss='categorical_crossentropy',\n",
        "                optimizer=RMSprop(learning_rate=1e-4),\n",
        "                #optimizer=RMSprop(learning_rate=5e-5),\n",
        "                #optimizer=RMSprop(learning_rate=1e-5),\n",
        "                metrics=['accuracy'])\n",
        "  \n",
        "  return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "cl7aUhbxs4dY",
        "outputId": "0272025e-80f9-4930-b8e4-4217e71439ba"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n",
            "Epoch 1/100\n",
            "100/100 - 113s - loss: 1.2102 - accuracy: 0.5575 - val_loss: 4.9089 - val_accuracy: 0.5000 - lr: 1.0000e-04 - 113s/epoch - 1s/step\n",
            "Epoch 2/100\n",
            "100/100 - 98s - loss: 0.7710 - accuracy: 0.5650 - val_loss: 3.6212 - val_accuracy: 0.5000 - lr: 1.0000e-04 - 98s/epoch - 983ms/step\n",
            "Epoch 3/100\n",
            "100/100 - 100s - loss: 0.7705 - accuracy: 0.5880 - val_loss: 7.1963 - val_accuracy: 0.5000 - lr: 1.0000e-04 - 100s/epoch - 999ms/step\n",
            "Epoch 4/100\n",
            "100/100 - 99s - loss: 0.8673 - accuracy: 0.6050 - val_loss: 34.9568 - val_accuracy: 0.5000 - lr: 1.0000e-04 - 99s/epoch - 993ms/step\n",
            "Epoch 5/100\n",
            "\n",
            "Epoch 5: ReduceLROnPlateau reducing learning rate to 3.9999998989515007e-05.\n",
            "100/100 - 98s - loss: 0.8739 - accuracy: 0.6250 - val_loss: 152.0877 - val_accuracy: 0.5000 - lr: 1.0000e-04 - 98s/epoch - 984ms/step\n",
            "Epoch 6/100\n",
            "100/100 - 98s - loss: 0.6771 - accuracy: 0.6400 - val_loss: 8.1057 - val_accuracy: 0.5370 - lr: 4.0000e-05 - 98s/epoch - 982ms/step\n",
            "Epoch 7/100\n",
            "100/100 - 98s - loss: 0.6512 - accuracy: 0.6725 - val_loss: 3.1458 - val_accuracy: 0.5900 - lr: 4.0000e-05 - 98s/epoch - 981ms/step\n",
            "Epoch 8/100\n",
            "100/100 - 98s - loss: 0.6383 - accuracy: 0.6780 - val_loss: 0.8579 - val_accuracy: 0.6810 - lr: 4.0000e-05 - 98s/epoch - 980ms/step\n",
            "Epoch 9/100\n",
            "100/100 - 98s - loss: 0.6224 - accuracy: 0.7010 - val_loss: 0.9090 - val_accuracy: 0.6720 - lr: 4.0000e-05 - 98s/epoch - 980ms/step\n",
            "Epoch 10/100\n",
            "100/100 - 98s - loss: 0.6234 - accuracy: 0.7020 - val_loss: 2.3797 - val_accuracy: 0.6800 - lr: 4.0000e-05 - 98s/epoch - 981ms/step\n",
            "Epoch 11/100\n",
            "100/100 - 98s - loss: 0.5905 - accuracy: 0.7155 - val_loss: 0.9926 - val_accuracy: 0.6980 - lr: 4.0000e-05 - 98s/epoch - 979ms/step\n",
            "Epoch 12/100\n",
            "100/100 - 98s - loss: 0.6141 - accuracy: 0.7125 - val_loss: 1.9483 - val_accuracy: 0.6630 - lr: 4.0000e-05 - 98s/epoch - 981ms/step\n",
            "Epoch 13/100\n",
            "100/100 - 98s - loss: 0.5857 - accuracy: 0.7315 - val_loss: 1.0098 - val_accuracy: 0.7170 - lr: 4.0000e-05 - 98s/epoch - 977ms/step\n",
            "Epoch 14/100\n",
            "100/100 - 99s - loss: 0.5811 - accuracy: 0.7195 - val_loss: 2.5031 - val_accuracy: 0.6740 - lr: 4.0000e-05 - 99s/epoch - 987ms/step\n",
            "Epoch 15/100\n",
            "100/100 - 99s - loss: 0.5748 - accuracy: 0.7300 - val_loss: 0.9040 - val_accuracy: 0.7110 - lr: 4.0000e-05 - 99s/epoch - 991ms/step\n",
            "Epoch 16/100\n",
            "100/100 - 100s - loss: 0.5662 - accuracy: 0.7395 - val_loss: 1.8071 - val_accuracy: 0.7010 - lr: 4.0000e-05 - 100s/epoch - 997ms/step\n",
            "Epoch 17/100\n",
            "100/100 - 100s - loss: 0.5829 - accuracy: 0.7230 - val_loss: 1.0843 - val_accuracy: 0.7230 - lr: 4.0000e-05 - 100s/epoch - 995ms/step\n",
            "Epoch 18/100\n",
            "100/100 - 99s - loss: 0.5763 - accuracy: 0.7185 - val_loss: 0.7644 - val_accuracy: 0.6990 - lr: 4.0000e-05 - 99s/epoch - 986ms/step\n",
            "Epoch 19/100\n",
            "100/100 - 98s - loss: 0.5499 - accuracy: 0.7490 - val_loss: 0.7694 - val_accuracy: 0.7450 - lr: 4.0000e-05 - 98s/epoch - 985ms/step\n",
            "Epoch 20/100\n",
            "100/100 - 99s - loss: 0.5966 - accuracy: 0.7490 - val_loss: 23.8936 - val_accuracy: 0.5930 - lr: 4.0000e-05 - 99s/epoch - 986ms/step\n",
            "Epoch 21/100\n",
            "100/100 - 98s - loss: 0.5474 - accuracy: 0.7395 - val_loss: 24.3548 - val_accuracy: 0.6530 - lr: 4.0000e-05 - 98s/epoch - 981ms/step\n",
            "Epoch 22/100\n",
            "100/100 - 98s - loss: 0.5561 - accuracy: 0.7555 - val_loss: 1.8380 - val_accuracy: 0.7000 - lr: 4.0000e-05 - 98s/epoch - 980ms/step\n",
            "Epoch 23/100\n",
            "\n",
            "Epoch 23: ReduceLROnPlateau reducing learning rate to 1.5999999595806004e-05.\n",
            "100/100 - 98s - loss: 0.5447 - accuracy: 0.7605 - val_loss: 6.7925 - val_accuracy: 0.7070 - lr: 4.0000e-05 - 98s/epoch - 980ms/step\n",
            "Epoch 24/100\n",
            "100/100 - 98s - loss: 0.5588 - accuracy: 0.7860 - val_loss: 2.5645 - val_accuracy: 0.7500 - lr: 1.6000e-05 - 98s/epoch - 978ms/step\n",
            "Epoch 25/100\n",
            "100/100 - 98s - loss: 0.4717 - accuracy: 0.8020 - val_loss: 1.2868 - val_accuracy: 0.7630 - lr: 1.6000e-05 - 98s/epoch - 984ms/step\n",
            "Epoch 26/100\n",
            "100/100 - 99s - loss: 0.4589 - accuracy: 0.8020 - val_loss: 1.5187 - val_accuracy: 0.7470 - lr: 1.6000e-05 - 99s/epoch - 989ms/step\n",
            "Epoch 27/100\n",
            "100/100 - 99s - loss: 0.4515 - accuracy: 0.7995 - val_loss: 1.6605 - val_accuracy: 0.7400 - lr: 1.6000e-05 - 99s/epoch - 991ms/step\n",
            "Epoch 28/100\n",
            "100/100 - 99s - loss: 0.4743 - accuracy: 0.7965 - val_loss: 1.0031 - val_accuracy: 0.7670 - lr: 1.6000e-05 - 99s/epoch - 986ms/step\n",
            "Epoch 29/100\n",
            "100/100 - 99s - loss: 0.4503 - accuracy: 0.8065 - val_loss: 0.7049 - val_accuracy: 0.7440 - lr: 1.6000e-05 - 99s/epoch - 985ms/step\n",
            "Epoch 30/100\n",
            "100/100 - 99s - loss: 0.4483 - accuracy: 0.8015 - val_loss: 0.7586 - val_accuracy: 0.7750 - lr: 1.6000e-05 - 99s/epoch - 986ms/step\n",
            "Epoch 31/100\n",
            "100/100 - 99s - loss: 0.4410 - accuracy: 0.8120 - val_loss: 0.7191 - val_accuracy: 0.7390 - lr: 1.6000e-05 - 99s/epoch - 990ms/step\n",
            "Epoch 32/100\n",
            "100/100 - 99s - loss: 0.4267 - accuracy: 0.8135 - val_loss: 0.6806 - val_accuracy: 0.7530 - lr: 1.6000e-05 - 99s/epoch - 987ms/step\n",
            "Epoch 33/100\n",
            "100/100 - 99s - loss: 0.4213 - accuracy: 0.8135 - val_loss: 0.6871 - val_accuracy: 0.7750 - lr: 1.6000e-05 - 99s/epoch - 986ms/step\n",
            "Epoch 34/100\n",
            "\n",
            "Epoch 34: ReduceLROnPlateau reducing learning rate to 6.399999983841554e-06.\n",
            "100/100 - 99s - loss: 0.4289 - accuracy: 0.8130 - val_loss: 0.9727 - val_accuracy: 0.7680 - lr: 1.6000e-05 - 99s/epoch - 989ms/step\n",
            "Epoch 35/100\n",
            "100/100 - 99s - loss: 0.4040 - accuracy: 0.8315 - val_loss: 0.9543 - val_accuracy: 0.7780 - lr: 6.4000e-06 - 99s/epoch - 988ms/step\n",
            "Epoch 36/100\n",
            "100/100 - 98s - loss: 0.3857 - accuracy: 0.8385 - val_loss: 0.7831 - val_accuracy: 0.7690 - lr: 6.4000e-06 - 98s/epoch - 984ms/step\n",
            "Epoch 37/100\n",
            "100/100 - 99s - loss: 0.3912 - accuracy: 0.8355 - val_loss: 1.1500 - val_accuracy: 0.7670 - lr: 6.4000e-06 - 99s/epoch - 987ms/step\n",
            "Epoch 38/100\n",
            "100/100 - 99s - loss: 0.3786 - accuracy: 0.8410 - val_loss: 1.1561 - val_accuracy: 0.7820 - lr: 6.4000e-06 - 99s/epoch - 992ms/step\n",
            "Epoch 39/100\n",
            "100/100 - 99s - loss: 0.3891 - accuracy: 0.8385 - val_loss: 0.9336 - val_accuracy: 0.7890 - lr: 6.4000e-06 - 99s/epoch - 987ms/step\n",
            "Epoch 40/100\n",
            "100/100 - 98s - loss: 0.3904 - accuracy: 0.8380 - val_loss: 0.8158 - val_accuracy: 0.7720 - lr: 6.4000e-06 - 98s/epoch - 985ms/step\n",
            "Epoch 41/100\n",
            "100/100 - 99s - loss: 0.3689 - accuracy: 0.8465 - val_loss: 0.8570 - val_accuracy: 0.7750 - lr: 6.4000e-06 - 99s/epoch - 989ms/step\n",
            "Epoch 42/100\n",
            "100/100 - 98s - loss: 0.3652 - accuracy: 0.8540 - val_loss: 0.7775 - val_accuracy: 0.7720 - lr: 6.4000e-06 - 98s/epoch - 984ms/step\n",
            "Epoch 43/100\n",
            "\n",
            "Epoch 43: ReduceLROnPlateau reducing learning rate to 2.5600000299164097e-06.\n",
            "100/100 - 99s - loss: 0.3866 - accuracy: 0.8375 - val_loss: 0.8680 - val_accuracy: 0.7840 - lr: 6.4000e-06 - 99s/epoch - 986ms/step\n",
            "Epoch 44/100\n",
            "100/100 - 98s - loss: 0.3531 - accuracy: 0.8495 - val_loss: 0.8663 - val_accuracy: 0.7830 - lr: 2.5600e-06 - 98s/epoch - 983ms/step\n",
            "Epoch 45/100\n",
            "100/100 - 98s - loss: 0.3525 - accuracy: 0.8610 - val_loss: 0.8426 - val_accuracy: 0.7770 - lr: 2.5600e-06 - 98s/epoch - 983ms/step\n",
            "Epoch 46/100\n",
            "100/100 - 98s - loss: 0.3511 - accuracy: 0.8545 - val_loss: 0.7867 - val_accuracy: 0.7780 - lr: 2.5600e-06 - 98s/epoch - 982ms/step\n",
            "Epoch 47/100\n",
            "\n",
            "Epoch 47: ReduceLROnPlateau reducing learning rate to 1.0239999937766699e-06.\n",
            "100/100 - 99s - loss: 0.3597 - accuracy: 0.8555 - val_loss: 0.7469 - val_accuracy: 0.7800 - lr: 2.5600e-06 - 99s/epoch - 992ms/step\n",
            "Epoch 48/100\n",
            "100/100 - 99s - loss: 0.3364 - accuracy: 0.8620 - val_loss: 0.7627 - val_accuracy: 0.7790 - lr: 1.0240e-06 - 99s/epoch - 988ms/step\n",
            "Epoch 49/100\n",
            "100/100 - 99s - loss: 0.3447 - accuracy: 0.8615 - val_loss: 0.7476 - val_accuracy: 0.7820 - lr: 1.0240e-06 - 99s/epoch - 986ms/step\n",
            "Epoch 50/100\n",
            "100/100 - 99s - loss: 0.3417 - accuracy: 0.8530 - val_loss: 0.7580 - val_accuracy: 0.7830 - lr: 1.0240e-06 - 99s/epoch - 992ms/step\n",
            "Epoch 51/100\n",
            "\n",
            "Epoch 51: ReduceLROnPlateau reducing learning rate to 1e-06.\n",
            "100/100 - 98s - loss: 0.3474 - accuracy: 0.8565 - val_loss: 0.7371 - val_accuracy: 0.7820 - lr: 1.0240e-06 - 98s/epoch - 982ms/step\n",
            "Epoch 52/100\n",
            "100/100 - 99s - loss: 0.3389 - accuracy: 0.8555 - val_loss: 0.7669 - val_accuracy: 0.7790 - lr: 1.0000e-06 - 99s/epoch - 986ms/step\n",
            "Epoch 53/100\n",
            "100/100 - 98s - loss: 0.3451 - accuracy: 0.8635 - val_loss: 0.7466 - val_accuracy: 0.7800 - lr: 1.0000e-06 - 98s/epoch - 985ms/step\n",
            "Epoch 54/100\n",
            "100/100 - 98s - loss: 0.3499 - accuracy: 0.8565 - val_loss: 0.7457 - val_accuracy: 0.7820 - lr: 1.0000e-06 - 98s/epoch - 980ms/step\n",
            "Epoch 55/100\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255,\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        train_dir,\n",
        "        #target_size=(188, 188),\n",
        "        target_size=(380, 380),\n",
        "        batch_size=20,\n",
        "        #batch_size=100,\n",
        "        #class_mode='binary')\n",
        "        class_mode='categorical')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        #target_size=(188, 188),\n",
        "        target_size=(380, 380),\n",
        "        batch_size=20,\n",
        "        #batch_size=100,\n",
        "        #class_mode='binary')\n",
        "        class_mode='categorical')\n",
        "\n",
        "EPOCHS = 100\n",
        "\n",
        "model_for_aug = create_model()\n",
        "\n",
        "my_callbacks = [\n",
        "                        tf.keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy', factor=0.4, patience=4, verbose=1, min_delta=0.0001, cooldown=0, min_lr=1e-6)\n",
        "    #tf.keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy', factor=0.1, patience=7, verbose=1, min_delta=0.0001, cooldown=0, min_lr=2e-6)\n",
        "    #tf.keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy', factor=0.1, patience=10, verbose=1, min_delta=0.0001, cooldown=0, min_lr=2e-6)\n",
        "]\n",
        "\n",
        "history_1 = model_for_aug.fit(\n",
        "      train_generator,\n",
        "      steps_per_epoch=100,\n",
        "      #steps_per_epoch=20,\n",
        "      epochs=EPOCHS,\n",
        "      callbacks=my_callbacks,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50,\n",
        "      #validation_steps=10,\n",
        "      verbose=2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "McTANzf9s928"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_loss_acc(history):\n",
        "  acc = history.history['accuracy']\n",
        "  val_acc = history.history['val_accuracy']\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "\n",
        "  epochs = range(len(acc))\n",
        "\n",
        "  plt.plot(epochs, acc, 'bo', label='Training accuracy')\n",
        "  plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n",
        "  plt.title('Training and validation accuracy')\n",
        "\n",
        "  plt.figure()\n",
        "\n",
        "  plt.plot(epochs, loss, 'bo', label='Training Loss')\n",
        "  plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n",
        "  plt.title('Training and validation loss')\n",
        "  plt.legend()\n",
        "\n",
        "  plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "7vsImJvZdOer",
        "outputId": "098b55f2-0ec5-4e2e-acc0-a74c6221ba37"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "  plot_loss_acc(history_1)"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}